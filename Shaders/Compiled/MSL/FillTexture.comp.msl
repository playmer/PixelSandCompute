#pragma clang diagnostic ignored "-Wmissing-prototypes"
#pragma clang diagnostic ignored "-Wmissing-braces"

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

template<typename T, size_t Num>
struct spvUnsafeArray
{
    T elements[Num ? Num : 1];
    
    thread T& operator [] (size_t pos) thread
    {
        return elements[pos];
    }
    constexpr const thread T& operator [] (size_t pos) const thread
    {
        return elements[pos];
    }
    
    device T& operator [] (size_t pos) device
    {
        return elements[pos];
    }
    constexpr const device T& operator [] (size_t pos) const device
    {
        return elements[pos];
    }
    
    constexpr const constant T& operator [] (size_t pos) const constant
    {
        return elements[pos];
    }
    
    threadgroup T& operator [] (size_t pos) threadgroup
    {
        return elements[pos];
    }
    constexpr const threadgroup T& operator [] (size_t pos) const threadgroup
    {
        return elements[pos];
    }
};

struct type_StructuredBuffer_uint
{
    uint _m0[1];
};

constant spvUnsafeArray<float4, 3> _36 = spvUnsafeArray<float4, 3>({ float4(0.537000000476837158203125, 0.537000000476837158203125, 0.537000000476837158203125, 1.0), float4(0.537000000476837158203125, 0.3179999887943267822265625, 0.16099999845027923583984375, 1.0), float4(0.56400001049041748046875, 0.834999978542327880859375, 1.0, 1.0) });

kernel void main0(const device type_StructuredBuffer_uint& BlockBuffer [[buffer(0)]], texture2d<float, access::write> outImage [[texture(0)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
{
    int2 _41 = int2(gl_GlobalInvocationID.xy);
    outImage.write(_36[BlockBuffer._m0[uint((_41.y * 1920) + _41.x)]], uint2(uint2(_41)));
}

